/*
 * generated by Xtext 2.20.0
 */
package org.xtext.mdsd.external.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.mdsd.external.quickCheckApi.Builder
import org.xtext.mdsd.external.quickCheckApi.Host
import org.xtext.mdsd.external.quickCheckApi.Port
import org.xtext.mdsd.external.quickCheckApi.Test
import org.xtext.mdsd.external.quickCheckApi.URI


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class QuickCheckApiGenerator extends AbstractGenerator {


	QCBoilerplate boilerplate = new QCBoilerplate;
	QCModelSystem modelSystem = new QCModelSystem;
	QCArbCmd arbCmd = new QCArbCmd;
	QCNextState nextState = new QCNextState;
	QCRunCmd runCmd = new QCRunCmd;
	QCPreconditions preconditions = new QCPreconditions;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val variable = resource.allContents.filter(Builder).next;
		createFile(fsa, variable);
		
	}
	
	def createFile(IFileSystemAccess2 fsa, Builder builder) {
		for (test : builder.tests) {
			fsa.generateFile(test.name + ".ml", test.compile());
		}
		
		
	}
	
	
	def CharSequence compile(Test test ) {
		'''
		open QCheck
		open Yojson.Basic.Util
		open Curl
		open Format
		
		«boilerplate.initHttpModule»
				
		module APIConf =
		struct
		
		type sut = (string list) ref
		type state = string list
		
		type cmd =
		 «FOR request : test.requests »
		     | «request.name.toUpperCaseFunction»
		 «ENDFOR»
		 [@@deriving show { with_path = false }]
		 «FOR request : test.requests »
		 let «request.name»URL="«request.url.protocol»://«request.url.domain.host.compile()»«request.url.domain.port.compile()»/«request.url.domain.uri.compile()»"
		 «ENDFOR»
		 
		  «modelSystem.initModelSystem()»
		  
		  «boilerplate.initUtilities()»
		 
		  «arbCmd.initArb_cmd(test)»
		 
		  «nextState.initNext_State(test)»
		 
		  «runCmd.initRun_cmd(test)»
		 
		  «preconditions.initPreconditions(test)»
		 
		 end
		 
		 
		 module APItest = QCSTM.Make(APIConf)
		 ;; 
		 
		 QCheck_runner.run_tests ~verbose:true
		   [APItest.agree_test ~count:500 ~name:"«test.name»"]
		 
		 '''
	
	}
	
	def toUpperCaseFunction(String s) {
		 s.substring(0,1).toUpperCase + s.substring(1)
	}
	
	
	def CharSequence compile(Host host) {
		if(host.hostParts.empty) {
			'''«FOR ip : host.ips SEPARATOR "."»«ip.toString»«ENDFOR»'''
		} else {
			'''«FOR hostPart : host.hostParts SEPARATOR "."»«hostPart.toString»«ENDFOR»'''
		}
		
		
	}
	
	def compile(Port port) {
		'''
		«IF !(port === null)  »:« port.toString »«ENDIF»'''
	}
	
	def compile(URI uri) {
		'''
		«uri.name»/«FOR part : uri.path SEPARATOR "/"»«part.part»«ENDFOR»'''
	}
	
	
}
