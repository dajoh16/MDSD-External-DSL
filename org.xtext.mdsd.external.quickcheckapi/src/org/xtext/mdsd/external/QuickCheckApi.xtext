grammar org.xtext.mdsd.external.QuickCheckApi with org.eclipse.xtext.common.Terminals

generate quickCheckApi "http://www.xtext.org/mdsd/external/QuickCheckApi"

Builder: 
	"TestBuilder" tests+=Test+;

Test:
	"Test" name=ID requests+=(Request)+
;

Request:
	"request" name=ID method=Method url=URL ("PRE:" preconditions=PreLogicExp)? 
	(params=Param)? body=Body? ("POST:"postconditions=PostLogicExp)?
;


Method:
	{GET} "GET" | {POST} "POST" | {PUT} "PUT" | {PATCH} "PATCH" | {DELETE} "DELETE"	
;

URL:
	protocol=Protocol "://" domain=Domain
;

Domain:
	host=Host (":" port=Port)? "/" (uri=URI)?
;

URI:
	name=ID("/" path+=PathPart)*	
;

PathPart:
	part=ID	
;

Host:
	hostParts+=ID ("." hostParts+=ID)* | ips+=INT ("." ips+=INT)*
;

Port:
	{Port} value=INT
;

Protocol:
	"http" | "https"	
;


Param:
	"parameters" pairs+=KVPair (";" pairs+=KVPair)*	
;

KVPair:
	key=Key "=" value=Value 
;

Value:
	ID | INT
;

Key:
	name=ID	
;

Body:
	"body" value=STRING
;

PreLogicExp returns PreProposition:
	PreConjunction("OR" {PreDisjunction.left=current} right=PreConjunction)*
;

PreConjunction returns PreProposition:
	Precondition ("AND" {PreConjunction.left=current} right=Precondition)*	
;

Precondition returns PreProposition:
	stateOp=StateOp value=STRING | stateOp=StateOp	
;

PostLogicExp returns PostProposition:
	PostConjunction("OR" {PostDisjunction.left=current} right=PostConjunction)*
;

PostConjunction returns PostProposition:
	Postcondition ("AND" {PostConjunction.left=current} right=Postcondition)*	
;


Postcondition returns PostProposition:
	(stateOp=StateOp stateValue=STRING) | (requestOp=RequestOp requestValue=STRING) | stateOp=StateOp
;

RequestOp:
	{RequestOp} notOp=NotOp? "returns"	
;

StateOp :
	{StateOp}notOp=NotOp? "contains" | {StateOp}NotOperator=NotOp? "empty"
;

NotOp:
	"not"	
;